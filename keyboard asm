// ASM          RAW BINARY            LINE            NOTES
// initialize screen pointer
@SCREEN         // 0100000000000000   0     0000000
D=A             // 1110110000010000   1     0000001
@SCREEN_PTR     // 0000000000010000   2     0000010   RAM[16]
M=D             // 1110001100001000   3     0000011

// print cursor
@95             // 0000000001011111   4     0000100   ASCII 95 (_)
D=A             // 1110110000010000   5     0000101
@SCREEN         // 0100000000000000   6     0000110
M=D             // 1110001100001000   7     0000111

// main loop
(LOOP)
// check if key is pressed
@KBD            // 0110000000000000   8     0001000
D=M             // 1111110000010000   9     0001001
@LOOP           // 0000000000001000   10    0001010   ROM[8]
D;JEQ           // 1110001100000010   11    0001011   SKIP IF NO KEY

// check if esc is pressed
@27             // 0000000000011011   12    0001100   ASCII 27 (ESC)
D=D-A           // 1110010011010000   13    0001101
@ESC            // 0000000000110001   14    0001110   ROM[49]
D;JEQ           // 1110001100000010   15    0001111

// check if backspace is pressed
@100            // 0000000001100100   16    0010000   ASCII 127 (BACKSPACE) - 27
D=D-A           // 1110010011010000   17    0010001
@BACKSPACE      // 0000000000100100   18    0010010   ROM[36]
D;JEQ           // 1110001100000010   19    0010011

// write key to screen buffer
@KBD            // 0110000000000000   20    0010100
D=M             // 1111110000010000   21    0010101
@SCREEN_PTR     // 0000000000010000   22    0010110   RAM[16]
A=M             // 1111110000100000   23    0010111
M=D             // 1110001100001000   24    0011000

// clear key buffer
@KBD            // 0110000000000000   25    0011001
M=0             // 1110101010001000   26    0011010

// advance screen pointer
@SCREEN_PTR     // 0000000000010000   27    0011011   RAM[16]
M=M+1           // 1111110111001000   28    0011100

// print cursor
@95             // 0000000001011111   29    0011101   ASCII 95 (_)
D=A             // 1110110000010000   30    0011110
@SCREEN_PTR     // 0000000000010000   31    0011111   RAM[16]
A=M             // 1111110000100000   32    0100000
M=D             // 1110001100001000   33    0100001

// restart loop
@LOOP           // 0000000000001000   34    0100010   ROM[8]
0;JMP           // 1110101010000111   35    0100011

(BACKSPACE)
// clear key buffer
@KBD            // 0110000000000000   36    0100100
M=0             // 1110101010001000   37    0100101

// move screen pointer back one space and clear the previous space
@SCREEN_PTR     // 0000000000010000   38    0100110   RAM[16]
M=M-1           // 1111110010001000   39    0100111
A=M+1           // 1111110111100000   40    0101000
M=0             // 1110101010001000   41    0101001

// print cursor
@95             // 0000000001011111   42    0101010   ASCII 95 (_)
D=A             // 1110110000010000   43    0101011
@SCREEN_PTR     // 0000000000010000   44    0101100   RAM[16]
A=M             // 1111110000100000   45    0101101
M=D             // 1110001100001000   46    0101110

// restart loop
@LOOP           // 0000000000001000   47    0101111   ROM[8]
0;JMP           // 1110101010000111   48    0110000

(ESC)
// clear key buffer
@KBD            // 0110000000000000   49    0110001
M=0             // 1110101010001000   50    0110010

// reset
@SCREEN_PTR     // 0000000000010000   51    0110011   RAM[16]
A=M             // 1111110000100000   52    0110100
M=0             // 1110101010001000   53    0110101

// move the screen buffer back
@SCREEN_PTR     // 0000000000010000   54    0110110   RAM[16]
M=M-1           // 1111110010001000   55    0110111

// check if SCREEN_PTR < SCREEN
@SCREEN_PTR     // 0000000000010000   56    0111000   RAM[16]
D=A             // 1110110000010000   57    0111001
@SCREEN         // 0100000000000000   58    0111010
D=D-A           // 1110010011010000   59    0111011
@0              // 0000000000000000   60    0111100   ROM[0]
D;JLT           // 1110001100000100   61    0111101
@ESC            // 0000000000110001   62    0111110   ROM[49]
0;JMP           // 1110101010000111   63    0111111
